services:
  app:
    build:
      context: '.'
      dockerfile: docker/production/Dockerfile
    image: 'optimizer-app:production'
    container_name: optimizer-app
    restart: unless-stopped
    ports:
      - '80:80'
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    # volumes:
      # - './storage/app:/var/www/html/storage/app'
      # - './storage/logs:/var/www/html/storage/logs'
      # - 'app-cache:/var/www/html/bootstrap/cache'
    networks:
      - optimizer-network
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: 'mysql/mysql-server:8.0'
    container_name: optimizer-mysql
    restart: unless-stopped
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 0
    volumes:
      - 'mysql-data:/var/lib/mysql'
    networks:
      - optimizer-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s
      interval: 30s

  nginx:
    image: 'nginx:alpine'
    container_name: optimizer-nginx
    restart: unless-stopped
    ports:
      - '443:443'
      - '80:80'
    volumes:
      - 'nginx-config:/etc/nginx'
      - 'ssl-certs:/etc/nginx/ssl'
    networks:
      - optimizer-network
    depends_on:
      - app
    command: |
      sh -c "
        # Create nginx config
        mkdir -p /etc/nginx/ssl
        cat > /etc/nginx/nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }
        
        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            sendfile on;
            keepalive_timeout 65;
        
            upstream app {
                server app:80;
            }
        
            server {
                listen 443 ssl;
                server_name img-optim.xtemos.com;
        
                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/key.pem;
        
                location / {
                    proxy_pass http://app;
                    proxy_set_header Host \$$host;
                    proxy_set_header X-Real-IP \$$remote_addr;
                    proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$$scheme;
                }
            }
        
            server {
                listen 80;
                server_name img-optim.xtemos.com;
                return 301 https://\$$server_name\$$request_uri;
            }
        }
        EOF
        
        # Start nginx
        nginx -g 'daemon off;'
      "

networks:
  optimizer-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  app-cache:
    driver: local
  nginx-config:
    driver: local
  ssl-certs:
    driver: local 